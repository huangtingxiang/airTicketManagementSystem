# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: '3.3'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: api/airTicket # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first.
      - redis
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/airTicket?useUnicode=true&characterEncoding=utf-8&useSSL=false
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_REDIS.HOST: redis
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
    volumes:
      - airTicket-resources:/resources
  db:
    image: mysql:5.6
    ports:
      - "3308:3306"
    restart: always
    command: --character-set-server=utf8 --collation-server=utf8_general_ci
    environment:
      MYSQL_USER: htx
      MYSQL_DATABASE: airTicket
      MYSQL_PASSWORD: 123456
      MYSQL_ROOT_PASSWORD: 123456
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
  redis:
    image: redis
    command: [ "redis-server", "--protected-mode", "no" ]
    hostname:
      redis
    ports:
      - "6380:6379"
    networks:
      - backend
  app-web:
    build:
      context: webapp/airTicket
      dockerfile: Dockerfile
      args:
        env: prod
    depends_on:
      - app-server
    ports:
      - "8081:80"
    networks:
      - backend
    volumes:
      - airTicket-resources:/app/resources    
# Volumes
volumes:
  db-data:
  airTicket-resources:

# Networks to be created to facilitate communication between containers
networks:
  backend:  
